//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrickyLib.NGramService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceFault", Namespace="http://schemas.microsoft.com/research/2009/10/webngram/fault")]
    [System.SerializableAttribute()]
    public partial class ServiceFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://schemas.microsoft.com/research/2009/10/webngram/frontend", ConfigurationName="NGramService.ILookupService")]
    public interface ILookupService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2009/10/webngram/frontend/ILookupService/Ge" +
            "tModels", ReplyAction="http://schemas.microsoft.com/research/2009/10/webngram/frontend/ILookupService/Ge" +
            "tModelsResponse")]
        string[] GetModels();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2009/10/webngram/frontend/ILookupService/Ge" +
            "tProbability", ReplyAction="http://schemas.microsoft.com/research/2009/10/webngram/frontend/ILookupService/Ge" +
            "tProbabilityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TrickyLib.NGramService.ServiceFault), Action="http://schemas.microsoft.com/research/2009/10/webngram/frontend/ILookupService/Ge" +
            "tProbabilityServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.microsoft.com/research/2009/10/webngram/fault")]
        float GetProbability(string authorizationToken, string modelUrn, string phrase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2009/10/webngram/frontend/ILookupService/Ge" +
            "tProbabilities", ReplyAction="http://schemas.microsoft.com/research/2009/10/webngram/frontend/ILookupService/Ge" +
            "tProbabilitiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TrickyLib.NGramService.ServiceFault), Action="http://schemas.microsoft.com/research/2009/10/webngram/frontend/ILookupService/Ge" +
            "tProbabilitiesServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.microsoft.com/research/2009/10/webngram/fault")]
        float[] GetProbabilities(string authorizationToken, string modelUrn, string[] phrases);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2009/10/webngram/frontend/ILookupService/Ge" +
            "tConditionalProbability", ReplyAction="http://schemas.microsoft.com/research/2009/10/webngram/frontend/ILookupService/Ge" +
            "tConditionalProbabilityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TrickyLib.NGramService.ServiceFault), Action="http://schemas.microsoft.com/research/2009/10/webngram/frontend/ILookupService/Ge" +
            "tConditionalProbabilityServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.microsoft.com/research/2009/10/webngram/fault")]
        float GetConditionalProbability(string authorizationToken, string modelUrn, string phrase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.microsoft.com/research/2009/10/webngram/frontend/ILookupService/Ge" +
            "tConditionalProbabilities", ReplyAction="http://schemas.microsoft.com/research/2009/10/webngram/frontend/ILookupService/Ge" +
            "tConditionalProbabilitiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TrickyLib.NGramService.ServiceFault), Action="http://schemas.microsoft.com/research/2009/10/webngram/frontend/ILookupService/Ge" +
            "tConditionalProbabilitiesServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.microsoft.com/research/2009/10/webngram/fault")]
        float[] GetConditionalProbabilities(string authorizationToken, string modelUrn, string[] phrases);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILookupServiceChannel : TrickyLib.NGramService.ILookupService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LookupServiceClient : System.ServiceModel.ClientBase<TrickyLib.NGramService.ILookupService>, TrickyLib.NGramService.ILookupService {
        
        public LookupServiceClient() {
        }
        
        public LookupServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LookupServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LookupServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LookupServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetModels() {
            return base.Channel.GetModels();
        }
        
        public float GetProbability(string authorizationToken, string modelUrn, string phrase) {
            return base.Channel.GetProbability(authorizationToken, modelUrn, phrase);
        }
        
        public float[] GetProbabilities(string authorizationToken, string modelUrn, string[] phrases) {
            return base.Channel.GetProbabilities(authorizationToken, modelUrn, phrases);
        }
        
        public float GetConditionalProbability(string authorizationToken, string modelUrn, string phrase) {
            return base.Channel.GetConditionalProbability(authorizationToken, modelUrn, phrase);
        }
        
        public float[] GetConditionalProbabilities(string authorizationToken, string modelUrn, string[] phrases) {
            return base.Channel.GetConditionalProbabilities(authorizationToken, modelUrn, phrases);
        }
    }
}
