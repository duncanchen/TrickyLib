using System;
using System.Collections.Generic;
using System.Text;

namespace TrickyLib.Statistics
{

    /// <summary>
    ///  A test of goodness of fit establishes whether or not an 
    ///observed frequency distribution differs from a theoretical distribution.
    ///http://en.wikipedia.org/wiki/Pearson's_chi-square_test
    /// </summary>
    public class Chi2TestGoodnessOfFit
    {
        private double _p;
        private double _chi2Statistic;
        private double _df;

        /// <summary>
        /// Return the chi square statistics
        /// </summary>
        public double Statistic
        {
            get { return _chi2Statistic; }
        }

        /// <summary>
        /// Return the chi square test p value
        /// </summary>
        public double Probability
        {
            get { return _p; }
        }

        /// <summary>
        /// Return the degree of freedom
        /// </summary>
        public double Df
        {
            get { return _df; }
        }

        /// <summary>
        /// The null hypothesis is: the observation is generated by a multi-nomial distribution parameterised by variable "distribution".
        /// Use the P value to check the null hypothesis.
        /// </summary>
        /// <param name="observation"> The observed frequency of discrete events. The events have to be exclusive. Typically, the frequency vector is a list of integers.</param>
        /// <param name="distribution"> The parameter set of a multi-nomial distribution. It does not have to be normalized to 1. (The code will normalize the parameters to 1 before the test.)</param>
        public Chi2TestGoodnessOfFit (List<double> observation, List<double> distribution)
        {
            bool zeroInDist = false;
            if (observation.Count != distribution.Count)
            {
                throw new ArgumentException(String.Format("The distribution and observation should have the same lengths."));
            }
            if (observation.Count <= 0)
            {
                throw new ArgumentException(String.Format("The distribution and observation should have at least one event type."));
            }
            this._df = distribution.Count - 1;
            double obsSum = 0;
            double disSum = 0;
            double sumRatio;
            for (int i = 0; i < observation.Count; ++i)
            {
                obsSum += observation[i];
                disSum += distribution[i];
                if (Math.Abs(distribution[i]) < 1.0e-10)
                {
                    if (Math.Abs(observation[i]) > 1.0e-5)
                        zeroInDist = true;
                    else
                        distribution[i] = 1.0e-10;
                }
            }
            if (!zeroInDist)
            {
                sumRatio = obsSum / disSum;

                this._chi2Statistic = 0;

                for (int i = 0; i < observation.Count; ++i)
                {
                    this._chi2Statistic += (distribution[i] * sumRatio - observation[i]) * (distribution[i] * sumRatio - observation[i]) / distribution[i] / sumRatio;
                }

                this._p = 1 - Chi2.Cdf(this._chi2Statistic, this._df);
            }
            else
                this._p = 0;
        }
    }
}
